plot.margin = unit(c(2,2,2,2), "cm"),
legend.title = element_text(size=12, color="black"),
legend.text = element_text(size=10, color="black"))
plot_usmap(include=c("AK")) +
geom_point(aes(x=lon.1, y=lat.1, fill=Def1), pch=21, data=plot_dat_transformed, size=3, color="black", show.legend=TRUE) +
geom_label_repel(aes(x=lon.1, y=lat.1, label=site), data=plot_dat_transformed, size=4.5, point.padding = 0.2) +
labs(fill="Freeze-thaw cycles (#)") +
scale_fill_continuous(values = soil_palette("gley", 4), guide = guide_colourbar(barwidth=10, barheight=1, direction = "horizontal", reverse = FALSE, title.position="top", ticks=FALSE, label=TRUE)) +
theme(legend.position=c(0.1,-0.3),
plot.margin = unit(c(2,2,2,2), "cm"),
legend.title = element_text(size=12, color="black"),
legend.text = element_text(size=10, color="black"))
plot_usmap(include=c("AK")) +
geom_point(aes(x=lon.1, y=lat.1, fill=Def1), pch=21, data=plot_dat_transformed, size=3, color="black", show.legend=TRUE) +
geom_label_repel(aes(x=lon.1, y=lat.1, label=site), data=plot_dat_transformed, size=4.5, point.padding = 0.2) +
labs(fill="Freeze-thaw cycles (#)") +
scale_fill_continuous(values = soil_palette("redox", 4), guide = guide_colourbar(barwidth=10, barheight=1, direction = "horizontal", reverse = FALSE, title.position="top", ticks=FALSE, label=TRUE)) +
theme(legend.position=c(0.1,-0.3),
plot.margin = unit(c(2,2,2,2), "cm"),
legend.title = element_text(size=12, color="black"),
legend.text = element_text(size=10, color="black"))
plot_usmap(include=c("AK")) +
geom_point(aes(x=lon.1, y=lat.1, fill=Def1), pch=21, data=plot_dat_transformed, size=3, color="black", show.legend=TRUE) +
geom_label_repel(aes(x=lon.1, y=lat.1, label=site), data=plot_dat_transformed, size=4.5, point.padding = 0.2) +
labs(fill="Freeze-thaw cycles (#)") +
scale_fill_binned(values = soil_palette("redox", 4), guide = guide_colourbar(barwidth=10, barheight=1, direction = "horizontal", reverse = FALSE, title.position="top", ticks=FALSE, label=TRUE)) +
theme(legend.position=c(0.1,-0.3),
plot.margin = unit(c(2,2,2,2), "cm"),
legend.title = element_text(size=12, color="black"),
legend.text = element_text(size=10, color="black"))
plot_usmap(include=c("AK")) +
geom_point(aes(x=lon.1, y=lat.1, fill=Def1), pch=21, data=plot_dat_transformed, size=3, color="black", show.legend=TRUE) +
geom_label_repel(aes(x=lon.1, y=lat.1, label=site), data=plot_dat_transformed, size=4.5, point.padding = 0.2) +
labs(fill="Freeze-thaw cycles (#)") +
scale_fill_viridis_c(option="plasma", direction=-1, guide = guide_colourbar(barwidth=10, barheight=1, direction = "horizontal", reverse = FALSE, title.position="top", ticks=FALSE, label=TRUE)) +
theme(legend.position=c(0.1,-0.3),
plot.margin = unit(c(2,2,2,2), "cm"),
legend.title = element_text(size=12, color="black"),
legend.text = element_text(size=10, color="black"))
plot_usmap(include=c("AK")) +
geom_point(aes(x=lon.1, y=lat.1, fill=Def1), pch=21, data=plot_dat_transformed, size=3, color="black", show.legend=TRUE) +
geom_label_repel(aes(x=lon.1, y=lat.1, label=site), data=plot_dat_transformed, size=4.5, point.padding = 0.2) +
labs(fill="Freeze-thaw cycles (#)") +
scale_fill_viridis_c(option="rainbow", direction=-1, guide = guide_colourbar(barwidth=10, barheight=1, direction = "horizontal", reverse = FALSE, title.position="top", ticks=FALSE, label=TRUE)) +
theme(legend.position=c(0.1,-0.3),
plot.margin = unit(c(2,2,2,2), "cm"),
legend.title = element_text(size=12, color="black"),
legend.text = element_text(size=10, color="black"))
plot_usmap(include=c("AK")) +
geom_point(aes(x=lon.1, y=lat.1, fill=Def1), pch=21, data=plot_dat_transformed, size=3, color="black", show.legend=TRUE) +
geom_label_repel(aes(x=lon.1, y=lat.1, label=site), data=plot_dat_transformed, size=4.5, point.padding = 0.2) +
labs(fill="Freeze-thaw cycles (#)") +
scale_fill_viridis_c(option="plasma", direction=-1, guide = guide_colourbar(barwidth=10, barheight=1, direction = "horizontal", reverse = FALSE, title.position="top", ticks=FALSE, label=TRUE)) +
theme(legend.position=c(0.1,-0.3),
plot.margin = unit(c(2,2,2,2), "cm"),
legend.title = element_text(size=12, color="black"),
legend.text = element_text(size=10, color="black"))
plot_usmap(include=c("AK")) +
geom_point(aes(x=lon.1, y=lat.1, fill=Def1), pch=21, data=plot_dat_transformed, size=3, color="black", show.legend=TRUE) +
geom_label_repel(aes(x=lon.1, y=lat.1, label=site), data=plot_dat_transformed, size=4.5, point.padding = 0.2) +
labs(fill="Freeze-thaw cycles (#)") +
scale_fill_viridis_c(option="plasma", direction=-1, guide = guide_colourbar(barwidth=10, barheight=1, direction = "horizontal", reverse = FALSE, title.position="top", ticks=FALSE, label=TRUE)) +
theme_er(legend.position=c(0.1,-0.3),
plot.margin = unit(c(2,2,2,2), "cm"),
legend.title = element_text(size=12, color="black"),
legend.text = element_text(size=10, color="black"))
# ggplot set up-----------------------------------
theme_er <- function() {  # this for all the elements common across plots
theme_bw() %+replace%
theme(legend.position = "top",
legend.key=element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.key.size = unit(1.5, 'lines'),
panel.border = element_rect(color="black",size=2, fill = NA),
plot.title = element_text(hjust = 0.5, size = 14),
plot.subtitle = element_text(hjust = 0.5, size = 12, lineheight = 1.5),
axis.text = element_text(size = 12, color = "black"),
axis.title = element_text(size = 12, face = "bold", color = "black"),
# formatting for facets
panel.background = element_blank(),
strip.background = element_rect(colour="white", fill="white"), #facet formatting
panel.spacing.x = unit(1.5, "lines"), #facet spacing for x axis
panel.spacing.y = unit(1.5, "lines"), #facet spacing for x axis
strip.text.x = element_text(size=12, face="bold"), #facet labels
strip.text.y = element_text(size=12, face="bold", angle = 270) #facet labels
)
}
plot_usmap(include=c("AK")) +
geom_point(aes(x=lon.1, y=lat.1, fill=Def1), pch=21, data=plot_dat_transformed, size=3, color="black", show.legend=TRUE) +
geom_label_repel(aes(x=lon.1, y=lat.1, label=site), data=plot_dat_transformed, size=4.5, point.padding = 0.2) +
labs(fill="Freeze-thaw cycles (#)") +
scale_fill_viridis_c(option="plasma", direction=-1, guide = guide_colourbar(barwidth=10, barheight=1, direction = "horizontal", reverse = FALSE, title.position="top", ticks=FALSE, label=TRUE)) +
theme_er(legend.position=c(0.1,-0.3),
plot.margin = unit(c(2,2,2,2), "cm"),
legend.title = element_text(size=12, color="black"),
legend.text = element_text(size=10, color="black"))
plot_usmap(include=c("AK")) +
geom_point(aes(x=lon.1, y=lat.1, fill=Def1), pch=21, data=plot_dat_transformed, size=3, color="black", show.legend=TRUE) +
geom_label_repel(aes(x=lon.1, y=lat.1, label=site), data=plot_dat_transformed, size=4.5, point.padding = 0.2) +
labs(fill="Freeze-thaw cycles (#)") +
scale_fill_viridis_c(option="plasma", direction=-1, guide = guide_colourbar(barwidth=10, barheight=1, direction = "horizontal", reverse = FALSE, title.position="top", ticks=FALSE, label=TRUE)) +
theme_er(),
theme(legend.position=c(0.1,-0.3),
plot.margin = unit(c(2,2,2,2), "cm"),
legend.title = element_text(size=12, color="black"),
legend.text = element_text(size=10, color="black"))
plot_usmap(include=c("AK")) +
geom_point(aes(x=lon.1, y=lat.1, fill=Def1), pch=21, data=plot_dat_transformed, size=3, color="black", show.legend=TRUE) +
geom_label_repel(aes(x=lon.1, y=lat.1, label=site), data=plot_dat_transformed, size=4.5, point.padding = 0.2) +
labs(fill="Freeze-thaw cycles (#)") +
scale_fill_viridis_c(option="plasma", direction=-1, guide = guide_colourbar(barwidth=10, barheight=1, direction = "horizontal", reverse = FALSE, title.position="top", ticks=FALSE, label=TRUE)) +
theme_er() +
theme(legend.position=c(0.1,-0.3),
plot.margin = unit(c(2,2,2,2), "cm"),
legend.title = element_text(size=12, color="black"),
legend.text = element_text(size=10, color="black"))
# load data---------------------------------
#ghg_csv = read.csv("processed/ghg_ftc.csv")
ghg_csv2 = read.csv("processed/ghg_depth.csv")
ftc_dat = read.csv("processed/FTC_quant_inprocess.csv")
ftc_fulldat = read.csv("processed/final_dat2.csv")
sommos_oc = read.csv("processed/oc_sommos_neonoc.csv")
probe_loc = read.csv("processed/Probe Locations.csv")
library(dplyr)
library(ggplot2)
library(maps)
require(maps)
require(viridis)
library(tidyr)
levels(as.factor(ftc_fulldat$site))
mutate(site = factor (site, levels = c("HEAL", "BONA", "BARR", "TOOL")))
levels(as.factor(ftc_fulldat$site))
levels(as.factor(ftc_fulldat$site)) +
mutate(site = factor (site, levels = c("HEAL", "BONA", "BARR", "TOOL")))
# load data---------------------------------
#ghg_csv = read.csv("processed/ghg_ftc.csv")
ghg_csv2 = read.csv("processed/ghg_depth.csv")
ftc_dat = read.csv("processed/FTC_quant_inprocess.csv")
ftc_fulldat = read.csv("processed/final_dat2.csv")
sommos_oc = read.csv("processed/oc_sommos_neonoc.csv")
probe_loc = read.csv("processed/Probe Locations.csv")
library(dplyr)
library(ggplot2)
library(maps)
require(maps)
require(viridis)
library(tidyr)
str(ghg_csv2)
str(ftc_dat)
str(ftc_fulldat)
str(sommos_oc)
str(probe_loc)
levels(as.factor(ghg_csv2$trmt))
levels(as.factor(ftc_fulldat$site))
mutate(site = factor (site, levels = c("HEAL", "BONA", "BARR", "TOOL")))
levels(as.factor(ftc_fulldat$site))
mutate(site = factor (site, levels = c("HEAL", "BONA", "BARR", "TOOL")))
ftc_fulldat = read.csv("processed/final_dat2.csv")
# ggplot set up-----------------------------------
theme_er <- function() {  # this for all the elements common across plots
theme_bw() %+replace%
theme(legend.position = "top",
legend.key=element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.key.size = unit(1.5, 'lines'),
panel.border = element_rect(color="black",size=2, fill = NA),
plot.title = element_text(hjust = 0.5, size = 14),
plot.subtitle = element_text(hjust = 0.5, size = 12, lineheight = 1.5),
axis.text = element_text(size = 12, color = "black"),
axis.title = element_text(size = 12, face = "bold", color = "black"),
# formatting for facets
panel.background = element_blank(),
strip.background = element_rect(colour="white", fill="white"), #facet formatting
panel.spacing.x = unit(1.5, "lines"), #facet spacing for x axis
panel.spacing.y = unit(1.5, "lines"), #facet spacing for x axis
strip.text.x = element_text(size=12, face="bold"), #facet labels
strip.text.y = element_text(size=12, face="bold", angle = 270) #facet labels
)
}
library(ggplot2)
library(soilpalettes)
library(soilDB)
library(aqp)
library(sharpshootR)
library(sp)
library(ggridges)
# bubble plot with depth on y axis---------------------------------
ftc_dat %>%
filter(duration==24 & mag.vec==1.5 & depth_cm<70) %>%
ggplot(aes(y = depth_cm, x = site, size = def1, color = def1))+
#geom_jitter()+
geom_point(position = position_jitter(width = 0.2))+
scale_y_reverse()+
# scale_size_continuous()+
scale_color_gradient(low = "blue", high = "red")+
ggtitle("Freeze Thaw Cycle Frequency") +
theme_er() +
facet_grid(~season)
ftc_dat %>%
filter(duration==24 & mag.vec==1.5) %>%
ggplot(aes(y = depth_cm, x = site, size = def1, color = def1))+
#geom_jitter()+
geom_point(position = position_jitter(width = 0.3))+
scale_y_reverse()+
# scale_size_continuous()+
scale_color_gradient(low = "blue", high = "red")+
theme_er() +
facet_grid(~season)
ftc_fulldat %>%
filter(duration==24 & mag.vec==1.5) %>%
ggplot(aes(y = depth_cm, x = site, size = Def1, color = Def1))+
#geom_jitter()+
geom_point(position = position_jitter(width = 0.2))+
scale_y_reverse()+
ggtitle("Freeze Thaw Gradient Across Seasons") +
scale_size_continuous(1) +
scale_color_gradient(low = "blue", high = "red")+
theme_er() +
facet_grid(~season)
ghg_csv2 = read.csv("processed/ghg_depth.csv")
ftc_dat = read.csv("processed/FTC_quant_inprocess.csv")
ftc_fulldat = read.csv("processed/final_dat2.csv")
sommos_oc = read.csv("processed/oc_sommos_neonoc.csv")
probe_loc = read.csv("processed/Probe Locations.csv")
library(dplyr)
library(ggplot2)
library(maps)
require(maps)
require(viridis)
library(tidyr)
str(ftc_fulldat)
levels(as.factor(ftc_fulldat$site))
mutate(site = factor (site, levels = c("HEAL", "BONA", "BARR", "TOOL")))
levels(as.factor(ftc_fulldat$site)) %>%
mutate(site = factor (site, levels = c("HEAL", "BONA", "BARR", "TOOL")))
ftc_fulldat %>%
mutate(site = factor (site, levels = c("HEAL", "BONA", "BARR", "TOOL")))
ftc_fulldat = ftc_fulldat %>%
mutate(site = factor (site, levels = c("HEAL", "BONA", "BARR", "TOOL")))
# ggplot set up-----------------------------------
theme_er <- function() {  # this for all the elements common across plots
theme_bw() %+replace%
theme(legend.position = "top",
legend.key=element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.key.size = unit(1.5, 'lines'),
panel.border = element_rect(color="black",size=2, fill = NA),
plot.title = element_text(hjust = 0.5, size = 14),
plot.subtitle = element_text(hjust = 0.5, size = 12, lineheight = 1.5),
axis.text = element_text(size = 12, color = "black"),
axis.title = element_text(size = 12, face = "bold", color = "black"),
# formatting for facets
panel.background = element_blank(),
strip.background = element_rect(colour="white", fill="white"), #facet formatting
panel.spacing.x = unit(1.5, "lines"), #facet spacing for x axis
panel.spacing.y = unit(1.5, "lines"), #facet spacing for x axis
strip.text.x = element_text(size=12, face="bold"), #facet labels
strip.text.y = element_text(size=12, face="bold", angle = 270) #facet labels
)
}
library(ggplot2)
library(soilpalettes)
library(soilDB)
library(aqp)
library(sharpshootR)
library(sp)
library(ggridges)
ftc_fulldat %>%
filter(duration==24 & mag.vec==1.5) %>%
ggplot(aes(y = depth_cm, x = site, size = Def1, color = Def1))+
#geom_jitter()+
geom_point(position = position_jitter(width = 0.2))+
scale_y_reverse() +
ggtitle("Freeze Thaw Gradient Across Seasons") +
scale_size_continuous(1) +
scale_color_gradient(low = "blue", high = "red")+
theme_er() +
facet_grid(~season)
# Load libraries-------------------------------
library(tidyverse)
library(reshape2)
# Load data------------------------------------
report_water = read.csv("processed/Lybrand Alaska Sept 2019 Report_Colorcoded.csv")
report_chcl3 = read.csv("processed/Lybrand Alaska CHCl3 Sept 2019 Report_Colorcoded.csv")
# Assemble reports------------------------------
fticr_report_water =
report_water %>%
rename(Mass=`ï..Mass`) %>%
# filter appropriate mass range
filter(Mass>200 & Mass<900) %>%
# remove isotopes
filter(C13==0) %>%
# remove peaks without C assignment
filter(C>0)
fticr_report_chcl3 =
report_chcl3 %>%
rename(Mass=`ï..Mass`) %>%
filter(Mass>200 & Mass<900) %>%
filter(C13==0) %>%
filter(C>0)
# Assemble reports WATER------------------------------
fticr_report_water =
report_water %>%
rename(Mass=`ï..Mass`) %>%
# filter appropriate mass range
filter(Mass>200 & Mass<900) %>%
# remove isotopes
filter(C13==0) %>%
# remove peaks without C assignment
filter(C>0)
fticr_meta_water =
fticr_report_water %>%
# select only the relevant columns for the formula assignments
dplyr::select(Mass:Candidates) %>%
# alternatively, use `starts_with()` if all your sample names start with the same prefix
# dplyr::select(-starts_with("FT")) %>%
# select only necessary columns
dplyr::select(Mass, C, H, O, N, S, P, El_comp, Class) %>%
# create columns for indices
dplyr::mutate(AImod = round((1+C-(0.5*O)-S-(0.5*(N+P+H)))/(C-(0.5*O)-S-N-P),4),
NOSC =  round(4-(((4*C)+H-(3*N)-(2*O)-(2*S))/C),4),
HC = round(H/C,2),
OC = round(O/C,2)) %>%
# create column/s for formula
# first, create columns for individual elements
# then, combine
dplyr::mutate(formula_c = if_else(C>0,paste0("C",C),as.character(NA)),
formula_h = if_else(H>0,paste0("H",H),as.character(NA)),
formula_o = if_else(O>0,paste0("O",O),as.character(NA)),
formula_n = if_else(N>0,paste0("N",N),as.character(NA)),
formula_s = if_else(S>0,paste0("S",S),as.character(NA)),
formula_p = if_else(P>0,paste0("P",P),as.character(NA)),
formula = paste0(formula_c,formula_h, formula_o, formula_n, formula_s, formula_p),
formula = str_replace_all(formula,"NA","")) %>%
dplyr::select(Mass, formula, El_comp, Class, HC, OC, AImod, NOSC, C:P)
# subset of meta for HC/OC only, for Van Krevelen diagrams
meta_hcoc_water =
fticr_meta_water %>%
dplyr::select(Mass, formula, HC, OC)
fticr_data_water =
fticr_report_water %>%
# select only the relevant columns for the formula assignments
dplyr::select(-c(C:Candidates)) %>%
# alternatively, use `starts_with()` if all your sample names start with the same prefix
# dplyr::select(Mass,starts_with("FT")) %>%
melt(id = c("Mass"), value.name = "presence", variable.name = "CoreID") %>%
# convert intensities to presence==1/absence==0
dplyr::mutate(presence = if_else(presence>0,1,0)) %>%
# keep only peaks present
filter(presence>0) %>%
left_join(dplyr::select(fticr_meta, Mass,formula), by = "Mass")  %>%
#left_join(corekey, by = "CoreID") %>%
# rearrange columns
dplyr::select(-Mass,-formula, -presence,Mass,formula,presence)
fticr_data_water =
fticr_report_water %>%
# select only the relevant columns for the formula assignments
dplyr::select(-c(C:Candidates)) %>%
# alternatively, use `starts_with()` if all your sample names start with the same prefix
# dplyr::select(Mass,starts_with("FT")) %>%
melt(id = c("Mass"), value.name = "presence", variable.name = "CoreID") %>%
# convert intensities to presence==1/absence==0
dplyr::mutate(presence = if_else(presence>0,1,0)) %>%
# keep only peaks present
filter(presence>0) %>%
left_join(dplyr::select(fticr_meta_water, Mass,formula), by = "Mass")  %>%
#left_join(corekey, by = "CoreID") %>%
# rearrange columns
dplyr::select(-Mass,-formula, -presence,Mass,formula,presence)
meta_formula_water =
fticr_meta_water %>%
dplyr::select(Mass, formula) %>%
group_by(formula) %>%
dplyr::mutate(n = n())
# Assemble reports chcl3--------------------------------
fticr_report_chcl3 =
report_chcl3 %>%
rename(Mass=`ï..Mass`) %>%
filter(Mass>200 & Mass<900) %>%
filter(C13==0) %>%
filter(C>0)
fticr_meta_chcl3 =
fticr_report_chcl3 %>%
# select only the relevant columns for the formula assignments
dplyr::select(Mass:Candidates) %>%
# alternatively, use `starts_with()` if all your sample names start with the same prefix
# dplyr::select(-starts_with("FT")) %>%
# select only necessary columns
dplyr::select(Mass, C, H, O, N, S, P, El_comp, Class) %>%
# create columns for indices
dplyr::mutate(AImod = round((1+C-(0.5*O)-S-(0.5*(N+P+H)))/(C-(0.5*O)-S-N-P),4),
NOSC =  round(4-(((4*C)+H-(3*N)-(2*O)-(2*S))/C),4),
HC = round(H/C,2),
OC = round(O/C,2)) %>%
# create column/s for formula
# first, create columns for individual elements
# then, combine
dplyr::mutate(formula_c = if_else(C>0,paste0("C",C),as.character(NA)),
formula_h = if_else(H>0,paste0("H",H),as.character(NA)),
formula_o = if_else(O>0,paste0("O",O),as.character(NA)),
formula_n = if_else(N>0,paste0("N",N),as.character(NA)),
formula_s = if_else(S>0,paste0("S",S),as.character(NA)),
formula_p = if_else(P>0,paste0("P",P),as.character(NA)),
formula = paste0(formula_c,formula_h, formula_o, formula_n, formula_s, formula_p),
formula = str_replace_all(formula,"NA","")) %>%
dplyr::select(Mass, formula, El_comp, Class, HC, OC, AImod, NOSC, C:P)
# subset of meta for HC/OC only, for Van Krevelen diagrams
meta_hcoc_chcl3 =
fticr_meta_chcl3 %>%
dplyr::select(Mass, formula, HC, OC)
fticr_data_chcl3 =
fticr_report_chcl3 %>%
# select only the relevant columns for the formula assignments
dplyr::select(-c(C:Candidates)) %>%
# alternatively, use `starts_with()` if all your sample names start with the same prefix
# dplyr::select(Mass,starts_with("FT")) %>%
melt(id = c("Mass"), value.name = "presence", variable.name = "CoreID") %>%
# convert intensities to presence==1/absence==0
dplyr::mutate(presence = if_else(presence>0,1,0)) %>%
# keep only peaks present
filter(presence>0) %>%
left_join(dplyr::select(fticr_meta_chcl3, Mass,formula), by = "Mass")  %>%
#left_join(corekey, by = "CoreID") %>%
# rearrange columns
dplyr::select(-Mass,-formula, -presence,Mass,formula,presence)
meta_formula_chcl3 =
fticr_meta_chcl3 %>%
dplyr::select(Mass, formula) %>%
group_by(formula) %>%
dplyr::mutate(n = n())
## OUTPUTS
write.csv(fticr_data_water,"fticr_data_water.csv", row.names = FALSE)
write.csv(fticr_meta_water,"fticr_meta_water.csv", row.names = FALSE)
write.csv(meta_hcoc_water,"fticr_meta_hcoc_water.csv", row.names = FALSE)
write.csv(fticr_data_chcl3,"fticr_data_chcl3.csv", row.names = FALSE)
write.csv(fticr_meta_chcl3,"fticr_meta_chcl3.csv", row.names = FALSE)
write.csv(meta_hcoc_Chcl3,"fticr_meta_hcoc_chcl3.csv", row.names = FALSE)
# load data---------------------------------
#ghg_csv = read.csv("processed/ghg_ftc.csv")
ghg_csv2 = read.csv("processed/ghg_depth.csv")
ftc_dat = read.csv("processed/FTC_quant_inprocess.csv")
ftc_fulldat = read.csv("processed/final_dat2.csv")
sommos_oc = read.csv("processed/oc_sommos_neonoc.csv")
probe_loc = read.csv("processed/Probe Locations.csv")
library(dplyr)
library(ggplot2)
library(maps)
require(maps)
require(viridis)
library(tidyr)
str(ghg_csv2)
str(ftc_dat)
str(ftc_fulldat)
str(sommos_oc)
str(probe_loc)
levels(as.factor(ghg_csv2$trmt))
levels(as.factor(ftc_fulldat$site))
ftc_fulldat = ftc_fulldat %>%
mutate(site = factor (site, levels = c("HEAL", "BONA", "BARR", "TOOL")))
ftc_fulldat = ftc_fulldat %>%
filter(!season == "activelayer")
ftc_fulldat = ftc_fulldat %>%
mutate(season = factor(season, levels = c("spring", "summer", "fall", "winter")))
ftc_dat = ftc_dat %>%
filter(!season == "activelayer")
ftc_dat = ftc_dat %>%
mutate(season = factor(season, levels = c("spring", "summer", "fall", "winter")))
# ggplot set up-----------------------------------
theme_er <- function() {  # this for all the elements common across plots
theme_bw() %+replace%
theme(legend.position = "top",
legend.key=element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.key.size = unit(1.5, 'lines'),
panel.border = element_rect(color="black",size=2, fill = NA),
plot.title = element_text(hjust = 0.5, size = 14),
plot.subtitle = element_text(hjust = 0.5, size = 12, lineheight = 1.5),
axis.text = element_text(size = 12, color = "black"),
axis.title = element_text(size = 12, face = "bold", color = "black"),
# formatting for facets
panel.background = element_blank(),
strip.background = element_rect(colour="white", fill="white"), #facet formatting
panel.spacing.x = unit(1.5, "lines"), #facet spacing for x axis
panel.spacing.y = unit(1.5, "lines"), #facet spacing for x axis
strip.text.x = element_text(size=12, face="bold"), #facet labels
strip.text.y = element_text(size=12, face="bold", angle = 270) #facet labels
)
}
library(ggplot2)
library(soilpalettes)
library(soilDB)
library(aqp)
library(sharpshootR)
library(sp)
library(ggridges)
# bubble plot with depth on y axis--------------------------------------
ghg_csv2 %>%
filter(mid > 0) %>%
ggplot(aes(y = mid, x = site, size = gain_ug_g_oc, color = gain_ug_g_oc))+
#geom_jitter()+
geom_point(position = position_jitter(width = 0.2))+
scale_y_reverse() +
coord_cartesian(ylim = c(70,0)) +
# scale_size_continuous()
scale_color_gradient(low = "blue", high = "yellow")+
ggtitle("Respiration (ug per g OC)") +
theme_er() +
facet_grid(~trmt)
