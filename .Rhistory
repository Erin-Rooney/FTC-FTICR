scale_y_reverse()+
# scale_size_continuous()+
scale_color_gradient(low = "blue", high = "red")+
theme_er() +
facet_grid(~season)
ftc_fulldat %>%
filter(duration==24 & mag.vec==1.5) %>%
ggplot(aes(y = depth_cm, x = site, size = Def1, color = Def1))+
#geom_jitter()+
geom_point(position = position_jitter(width = 0.2))+
scale_y_reverse()+
# scale_size_continuous()+
scale_color_gradient(low = "blue", high = "red")+
theme_er() +
facet_grid(~season)
ftc_fulldat %>%
filter(duration==24 & mag.vec==1.5) %>%
ggplot(aes(y = depth_cm, x = site, size = Def1, color = Def1))+
#geom_jitter()+
geom_point(position = position_jitter(width = 0.2))+
scale_y_reverse()+
ggtitle("Freeze Thaw Gradient Across Seasons")
ftc_fulldat %>%
filter(duration==24 & mag.vec==1.5) %>%
ggplot(aes(y = depth_cm, x = site, size = Def1, color = Def1))+
#geom_jitter()+
geom_point(position = position_jitter(width = 0.2))+
scale_y_reverse()+
ggtitle("Freeze Thaw Gradient Across Seasons") +
# scale_size_continuous()+
scale_color_gradient(low = "blue", high = "red")+
theme_er() +
facet_grid(~season)
ftc_fulldat %>%
filter(duration==24 & mag.vec==1.5) %>%
ggplot(aes(y = depth_cm, x = site, size = Def1, color = Def1))+
#geom_jitter()+
geom_point(position = position_jitter(width = 0.2))+
scale_y_reverse()+
ggtitle("Freeze Thaw Gradient Across Seasons") +
scale_size_continuous(0.5)+
scale_color_gradient(low = "blue", high = "red")+
theme_er() +
facet_grid(~season)
ftc_fulldat %>%
filter(duration==24 & mag.vec==1.5) %>%
ggplot(aes(y = depth_cm, x = site, size = Def1, color = Def1))+
#geom_jitter()+
geom_point(position = position_jitter(width = 0.2))+
scale_y_reverse()+
ggtitle("Freeze Thaw Gradient Across Seasons") +
scale_size_continuous(0.75)+
scale_color_gradient(low = "blue", high = "red")+
theme_er() +
facet_grid(~season)
ftc_fulldat %>%
filter(duration==24 & mag.vec==1.5) %>%
ggplot(aes(y = depth_cm, x = site, size = Def1, color = Def1))+
#geom_jitter()+
geom_point(position = position_jitter(width = 0.2))+
scale_y_reverse()+
ggtitle("Freeze Thaw Gradient Across Seasons") +
scale_size_continuous(1) +
scale_color_gradient(low = "blue", high = "red")+
theme_er() +
facet_grid(~season)
# Load libraries-------------------------------
library(tidyverse)
library(reshape2)
# Load data------------------------------------
report = read.csv("processed/Lybrand Alaska Sept 2019 Report_Colorcoded.csv")
fticr_data = read.csv(FTICR_LONG)
fticr_data = read.csv("fticr_data.csv")
fticr_data = read.csv("processed/fticr_data.csv")
fticr_meta = read.csv("processed/fticr_meta.csv")
meta_hcoc  = read.csv("processed/fticr_meta_hcoc.csv")
report2 = read.csv("processed/Lybrand Alaska CHCl3 Sept 2019 Report_Colorcoded.csv")
fticr_report2 =
report %>%
filter(Mass>200 & Mass<900) %>%
filter(C13==0) %>%
filter(C>0)
# Load data------------------------------------
report = read.csv("processed/Lybrand Alaska Sept 2019 Report_Colorcoded.csv")
# Assemble reports------------------------------
fticr_report =
report %>%
# filter appropriate mass range
filter(Mass>200 & Mass<900) %>%
# remove isotopes
filter(C13==0) %>%
# remove peaks without C assignment
filter(C>0)
rlang::last_error()
# Load libraries-------------------------------
library(tidyverse)
library(reshape2)
# Load data------------------------------------
report = read.csv("processed/Lybrand Alaska Sept 2019 Report_Colorcoded.csv")
library(dplyr)
# Load data------------------------------------
report = read.csv("processed/Lybrand Alaska Sept 2019 Report_Colorcoded.csv")
report2 = read.csv("processed/Lybrand Alaska CHCl3 Sept 2019 Report_Colorcoded.csv")
# Assemble reports------------------------------
fticr_report =
report %>%
# filter appropriate mass range
filter(Mass>200 & Mass<900) %>%
# remove isotopes
filter(C13==0) %>%
# remove peaks without C assignment
filter(C>0)
fticr_report2 =
report %>%
filter(Mass>200 & Mass<900) %>%
filter(C13==0) %>%
filter(C>0)
fticr_meta =
fticr_report %>%
# select only the relevant columns for the formula assignments
dplyr::select(Mass:Candidates) %>%
# alternatively, use `starts_with()` if all your sample names start with the same prefix
# dplyr::select(-starts_with("FT")) %>%
# select only necessary columns
dplyr::select(Mass, C, H, O, N, S, P, El_comp, Class) %>%
# create columns for indices
dplyr::mutate(AImod = round((1+C-(0.5*O)-S-(0.5*(N+P+H)))/(C-(0.5*O)-S-N-P),4),
NOSC =  round(4-(((4*C)+H-(3*N)-(2*O)-(2*S))/C),4),
HC = round(H/C,2),
OC = round(O/C,2)) %>%
# create column/s for formula
# first, create columns for individual elements
# then, combine
dplyr::mutate(formula_c = if_else(C>0,paste0("C",C),as.character(NA)),
formula_h = if_else(H>0,paste0("H",H),as.character(NA)),
formula_o = if_else(O>0,paste0("O",O),as.character(NA)),
formula_n = if_else(N>0,paste0("N",N),as.character(NA)),
formula_s = if_else(S>0,paste0("S",S),as.character(NA)),
formula_p = if_else(P>0,paste0("P",P),as.character(NA)),
formula = paste0(formula_c,formula_h, formula_o, formula_n, formula_s, formula_p),
formula = str_replace_all(formula,"NA","")) %>%
dplyr::select(Mass, formula, El_comp, Class, HC, OC, AImod, NOSC, C:P)
sommos_oc = read.csv("processed/oc_sommos_neonoc.csv")
library(dplyr)
library(tidyr)
str(ghg_csv2)
str(ftc_dat)
str(ftc_fulldat)
levels(as.factor(ghg_csv2$trmt))
levels(as.factor(ftc_fulldat$site))
mutate(site = factor (site, levels = c("BARR", "TOOL", "BONA", "HEAL")))
# ggplot set up-----------------------------------
theme_er <- function() {  # this for all the elements common across plots
theme_bw() %+replace%
theme(legend.position = "top",
legend.key=element_blank(),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.key.size = unit(1.5, 'lines'),
panel.border = element_rect(color="black",size=2, fill = NA),
plot.title = element_text(hjust = 0.5, size = 14),
plot.subtitle = element_text(hjust = 0.5, size = 12, lineheight = 1.5),
axis.text = element_text(size = 12, color = "black"),
axis.title = element_text(size = 12, face = "bold", color = "black"),
# formatting for facets
panel.background = element_blank(),
strip.background = element_rect(colour="white", fill="white"), #facet formatting
panel.spacing.x = unit(1.5, "lines"), #facet spacing for x axis
panel.spacing.y = unit(1.5, "lines"), #facet spacing for x axis
strip.text.x = element_text(size=12, face="bold"), #facet labels
strip.text.y = element_text(size=12, face="bold", angle = 270) #facet labels
)
}
library(ggplot2)
library(soilpalettes)
library(soilDB)
library(aqp)
library(sharpshootR)
library(sp)
library(ggridges)
str(sommos_oc)
sommos_oc %>%
filter(mid > 0) %>%
ggplot(aes(y = mid, x = site, size = oc.g100g, color = oc.g100g))+
#geom_jitter()+
geom_point(position = position_jitter(width = 0.2))+
scale_y_reverse() +
coord_cartesian(ylim = c(70,0)) +
# scale_size_continuous()
scale_color_gradient(low = "red", high = "yellow")+
ggtitle("Respiration (ug per g OC)") +
theme_er() +
facet_grid(~trmt)
sommos_oc %>%
filter(mid > 0) %>%
ggplot(aes(y = mid, x = site, size = OC.g100g, color = OC.g100g))+
#geom_jitter()+
geom_point(position = position_jitter(width = 0.2))+
scale_y_reverse() +
coord_cartesian(ylim = c(70,0)) +
# scale_size_continuous()
scale_color_gradient(low = "red", high = "yellow")+
ggtitle("Respiration (ug per g OC)") +
theme_er() +
facet_grid(~trmt)
sommos_oc %>%
filter(mid > 0) %>%
ggplot(aes(y = mid, x = site, size = OC.g100g, color = OC.g100g))+
#geom_jitter()+
geom_point(position = position_jitter(width = 0.2))+
scale_y_reverse() +
coord_cartesian(ylim = c(70,0)) +
# scale_size_continuous()
scale_color_gradient(low = "red", high = "yellow")+
ggtitle("Organic Carbon Contnent, g per 100g") +
theme_er()
sommos_oc %>%
filter(mid > 0) %>%
ggplot(aes(y = mid, x = site, size = OC.g100g, color = OC.g100g))+
#geom_jitter()+
geom_point(position = position_jitter(width = 0.2))+
scale_y_reverse() +
coord_cartesian(ylim = c(70,0)) +
# scale_size_continuous()
scale_color_gradient(low = "red", high = "yellow")+
ggtitle("Organic Carbon Content, g per 100g") +
theme_er()
sommos_oc %>%
filter(mid > 0) %>%
ggplot(aes(y = mid, x = site, size = OC.g100g, color = OC.g100g))+
#geom_jitter()+
geom_point(position = position_jitter(width = 0.2))+
scale_y_reverse() +
coord_cartesian(ylim = c(70,0)) +
# scale_size_continuous()
scale_color_gradient(low = "red", high = "yellow")+
ggtitle("Organic Carbon Content, g per 100g") +
theme_er()
sommos_oc %>%
filter(mid > 0) %>%
ggplot(aes(y = mid, x = site, size = OC.g100g, color = OC.g100g))+
#geom_jitter()+
geom_point(position = position_jitter(width = 0.2))+
scale_y_reverse() +
coord_cartesian(ylim = c(70,0)) +
# scale_size_continuous()
scale_color_gradient(low = "purple", high = "yellow")+
ggtitle("Organic Carbon Content, g per 100g") +
theme_er()
# load data---------------------------------
#ghg_csv = read.csv("processed/ghg_ftc.csv")
ghg_csv2 = read.csv("processed/ghg_depth.csv")
levels(as.factor(ghg_csv2$trmt))
# bubble plot with depth on y axis
ghg_csv2 %>%
filter(mid > 0) %>%
ggplot(aes(y = mid, x = site, size = gain_ug_g_oc, color = gain_ug_g_oc))+
#geom_jitter()+
geom_point(position = position_jitter(width = 0.2))+
scale_y_reverse() +
coord_cartesian(ylim = c(70,0)) +
# scale_size_continuous()
scale_color_gradient(low = "blue", high = "yellow")+
ggtitle("Respiration (ug per g OC)") +
theme_er() +
facet_grid(~trmt)
# Load libraries-------------------------------
library(tidyverse)
library(reshape2)
library(dplyr)
# Load data------------------------------------
report = read.csv("processed/Lybrand Alaska Sept 2019 Report_Colorcoded.csv")
report2 = read.csv("processed/Lybrand Alaska CHCl3 Sept 2019 Report_Colorcoded.csv")
# Assemble reports------------------------------
fticr_report =
report %>%
# filter appropriate mass range
filter(Mass>200 & Mass<900) %>%
# remove isotopes
filter(C13==0) %>%
# remove peaks without C assignment
filter(C>0)
fticr_report2 =
report %>%
filter(Mass>200 & Mass<900) %>%
filter(C13==0) %>%
filter(C>0)
# Assemble reports------------------------------
fticr_report =
report %>%
# filter appropriate mass range
filter('Mass'>200 & 'Mass'<900) %>%
# remove isotopes
filter(C13==0) %>%
# remove peaks without C assignment
filter(C>0)
fticr_report2 =
report %>%
filter('Mass'>200 & 'Mass'<900) %>%
filter(C13==0) %>%
filter(C>0)
fticr_meta =
fticr_report %>%
# select only the relevant columns for the formula assignments
dplyr::select(Mass:Candidates) %>%
# alternatively, use `starts_with()` if all your sample names start with the same prefix
# dplyr::select(-starts_with("FT")) %>%
# select only necessary columns
dplyr::select(Mass, C, H, O, N, S, P, El_comp, Class) %>%
# create columns for indices
dplyr::mutate(AImod = round((1+C-(0.5*O)-S-(0.5*(N+P+H)))/(C-(0.5*O)-S-N-P),4),
NOSC =  round(4-(((4*C)+H-(3*N)-(2*O)-(2*S))/C),4),
HC = round(H/C,2),
OC = round(O/C,2)) %>%
# create column/s for formula
# first, create columns for individual elements
# then, combine
dplyr::mutate(formula_c = if_else(C>0,paste0("C",C),as.character(NA)),
formula_h = if_else(H>0,paste0("H",H),as.character(NA)),
formula_o = if_else(O>0,paste0("O",O),as.character(NA)),
formula_n = if_else(N>0,paste0("N",N),as.character(NA)),
formula_s = if_else(S>0,paste0("S",S),as.character(NA)),
formula_p = if_else(P>0,paste0("P",P),as.character(NA)),
formula = paste0(formula_c,formula_h, formula_o, formula_n, formula_s, formula_p),
formula = str_replace_all(formula,"NA","")) %>%
dplyr::select(Mass, formula, El_comp, Class, HC, OC, AImod, NOSC, C:P)
fticr_meta =
fticr_report %>%
# select only the relevant columns for the formula assignments
dplyr::select('Mass':Candidates) %>%
# alternatively, use `starts_with()` if all your sample names start with the same prefix
# dplyr::select(-starts_with("FT")) %>%
# select only necessary columns
dplyr::select('Mass', C, H, O, N, S, P, El_comp, Class) %>%
# create columns for indices
dplyr::mutate(AImod = round((1+C-(0.5*O)-S-(0.5*(N+P+H)))/(C-(0.5*O)-S-N-P),4),
NOSC =  round(4-(((4*C)+H-(3*N)-(2*O)-(2*S))/C),4),
HC = round(H/C,2),
OC = round(O/C,2)) %>%
# create column/s for formula
# first, create columns for individual elements
# then, combine
dplyr::mutate(formula_c = if_else(C>0,paste0("C",C),as.character(NA)),
formula_h = if_else(H>0,paste0("H",H),as.character(NA)),
formula_o = if_else(O>0,paste0("O",O),as.character(NA)),
formula_n = if_else(N>0,paste0("N",N),as.character(NA)),
formula_s = if_else(S>0,paste0("S",S),as.character(NA)),
formula_p = if_else(P>0,paste0("P",P),as.character(NA)),
formula = paste0(formula_c,formula_h, formula_o, formula_n, formula_s, formula_p),
formula = str_replace_all(formula,"NA","")) %>%
dplyr::select('Mass', formula, El_comp, Class, HC, OC, AImod, NOSC, C:P)
fticr_meta =
fticr_report %>%
# select only the relevant columns for the formula assignments
dplyr::select(Mass:Candidates) %>%
# alternatively, use `starts_with()` if all your sample names start with the same prefix
# dplyr::select(-starts_with("FT")) %>%
# select only necessary columns
dplyr::select(Mass, C, H, O, N, S, P, El_comp, Class) %>%
# create columns for indices
dplyr::mutate(AImod = round((1+C-(0.5*O)-S-(0.5*(N+P+H)))/(C-(0.5*O)-S-N-P),4),
NOSC =  round(4-(((4*C)+H-(3*N)-(2*O)-(2*S))/C),4),
HC = round(H/C,2),
OC = round(O/C,2)) %>%
# create column/s for formula
# first, create columns for individual elements
# then, combine
dplyr::mutate(formula_c = if_else(C>0,paste0("C",C),as.character(NA)),
formula_h = if_else(H>0,paste0("H",H),as.character(NA)),
formula_o = if_else(O>0,paste0("O",O),as.character(NA)),
formula_n = if_else(N>0,paste0("N",N),as.character(NA)),
formula_s = if_else(S>0,paste0("S",S),as.character(NA)),
formula_p = if_else(P>0,paste0("P",P),as.character(NA)),
formula = paste0(formula_c,formula_h, formula_o, formula_n, formula_s, formula_p),
formula = str_replace_all(formula,"NA","")) %>%
dplyr::select(Mass, formula, El_comp, Class, HC, OC, AImod, NOSC, C:P)
fticr_meta =
fticr_report %>%
# select only the relevant columns for the formula assignments
dplyr::select("Mass:Candidates") %>%
# alternatively, use `starts_with()` if all your sample names start with the same prefix
# dplyr::select(-starts_with("FT")) %>%
# select only necessary columns
dplyr::select("Mass, C, H, O, N, S, P, El_comp, Class") %>%
# create columns for indices
dplyr::mutate(AImod = round((1+C-(0.5*O)-S-(0.5*(N+P+H)))/(C-(0.5*O)-S-N-P),4),
NOSC =  round(4-(((4*C)+H-(3*N)-(2*O)-(2*S))/C),4),
HC = round(H/C,2),
OC = round(O/C,2)) %>%
# create column/s for formula
# first, create columns for individual elements
# then, combine
dplyr::mutate(formula_c = if_else(C>0,paste0("C",C),as.character(NA)),
formula_h = if_else(H>0,paste0("H",H),as.character(NA)),
formula_o = if_else(O>0,paste0("O",O),as.character(NA)),
formula_n = if_else(N>0,paste0("N",N),as.character(NA)),
formula_s = if_else(S>0,paste0("S",S),as.character(NA)),
formula_p = if_else(P>0,paste0("P",P),as.character(NA)),
formula = paste0(formula_c,formula_h, formula_o, formula_n, formula_s, formula_p),
formula = str_replace_all(formula,"NA","")) %>%
dplyr::select("Mass, formula, El_comp, Class, HC, OC, AImod, NOSC, C:P")
fticr_meta =
fticr_report %>%
# select only the relevant columns for the formula assignments
dplyr::select("Mass":"Candidates") %>%
# alternatively, use `starts_with()` if all your sample names start with the same prefix
# dplyr::select(-starts_with("FT")) %>%
# select only necessary columns
dplyr::select("Mass", "C", "H", "O", "N", "S", "P", "El_comp", "Class") %>%
# create columns for indices
dplyr::mutate(AImod = round((1+C-(0.5*O)-S-(0.5*(N+P+H)))/(C-(0.5*O)-S-N-P),4),
NOSC =  round(4-(((4*C)+H-(3*N)-(2*O)-(2*S))/C),4),
HC = round(H/C,2),
OC = round(O/C,2)) %>%
# create column/s for formula
# first, create columns for individual elements
# then, combine
dplyr::mutate(formula_c = if_else(C>0,paste0("C",C),as.character(NA)),
formula_h = if_else(H>0,paste0("H",H),as.character(NA)),
formula_o = if_else(O>0,paste0("O",O),as.character(NA)),
formula_n = if_else(N>0,paste0("N",N),as.character(NA)),
formula_s = if_else(S>0,paste0("S",S),as.character(NA)),
formula_p = if_else(P>0,paste0("P",P),as.character(NA)),
formula = paste0(formula_c,formula_h, formula_o, formula_n, formula_s, formula_p),
formula = str_replace_all(formula,"NA","")) %>%
dplyr::select("Mass", "formula", "El_comp", "Class", "HC", "OC", "AImod", "NOSC", "C:P")
probe_loc = read.csv("processed/Probe Locations")
probe_loc = read.csv("processed/Probe Locations.csv")
library(dplyr)
library(ggplot2)
require(maps)
require(viridis)
library(tidyr)
str(probe_loc)
alaska_map <- map_data("alaska")
(alaska <- ggplot(data = usa) +
geom_sf(fill = "cornsilk") +
coord_sf(crs = st_crs(3467), xlim = c(-2400000, 1600000), ylim = c(200000,
2500000), expand = FALSE, datum = NA))
usa <- subset(world, admin == "United States of America")
library("rnaturalearth")
install.packages("rnaturalearth")
install.packages("rnaturalearthdata")
library("rnaturalearth")
library("rnaturalearthdata")
library("sf")
world <- ne_countries(scale='medium',returnclass = 'sf')
install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel",
"ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata"))
install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel", "ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata"))
world <- ne_countries(scale='medium',returnclass = 'sf')
world_map <- map_data("world data")
library("rnaturalearth")
library("rnaturalearthdata")
library("sf")
install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel",
"ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata"))
world <- ne_countries(scale='medium',returnclass = 'sf')
world <- ne_countries(scale='medium',returnclass = 'sf')
ggplot(data = world) +
geom_sf()
library(dplyr)
library(ggplot2)
require(maps)
require(viridis)
library(tidyr)
ftc_fulldat = read.csv("processed/final_dat2.csv")
world <- ne_countries(scale='medium',returnclass = 'sf')
library("ggspatial")
world <- ne_countries(scale='medium',returnclass = 'sf')
library(dplyr)
library(ggplot2)
library(maps)
require(maps)
MainStates <- map_data("state")
mainstates <- map_data("state")
ggplot(data = mainstates)
ggplot(data = mainstates) +
geom_sf()
ggplot() +
geom_polygon( data=MainStates, aes(x=long, y=lat, group=group),
color="black", fill="lightblue" )
ggplot(map.states, aes(long, lat,group=group)) + geom_polygon()
data(map.states)
library(ggplot2)
library(tidyverse)
library(fiftystater)
mapdata <- read.csv("state-medal-count.csv", header=TRUE, stringsAsFactors=FALSE)
mapdata %>% glimpse()
mapdata <- read.csv("processed/state-medal-count.csv", header=TRUE, stringsAsFactors=FALSE)
mapdata %>% glimpse()
data("fifty_states")
data("probe_loc")
data("processed/probe_loc.csv")
data("processed/Probe Locations.csv")
probe_loc %>%
ggplot() + geom_polygon( data=fifty_states, aes(x=long, y=lat, group = group),color="white", fill="grey10" )
probe_loc %>%
ggplot() + geom_polygon( data=probe_loc, aes(x=long, y=lat, group = group),color="white", fill="grey10" )
probe_loc %>%
ggplot() + geom_polygon( data=probe_loc, aes(x=referenceLongitude, y=referenceLatitude, group = sideID),color="white", fill="grey10" )
probe_loc %>%
ggplot() + geom_polygon( data=probe_loc, aes(x=referenceLongitude, y=referenceLatitude, group = siteID),color="white", fill="grey10" )
probe_loc %>%
ggplot() + geom_polygon( data=probe_loc, aes(x=referenceLongitude, y=referenceLatitude, group = group),color="white", fill="grey10" )
probe_loc %>%
ggplot() + geom_polygon( data=probe_loc, aes(x=referenceLongitude, y=referenceLatitude, group = siteID),color="white", fill="grey10" )
ggplot() + geom_polygon(data=fifty_states, aes(x=long, y=lat, group = group),color="white", fill="grey92" ) +
geom_point(data=mapdata, aes(x=lon, y=lat, size = medals), color="black") +
scale_size(name="", range = c(2, 20)) +
guides(size=guide_legend("GABF medals 1985-2015")) +
theme_void()
